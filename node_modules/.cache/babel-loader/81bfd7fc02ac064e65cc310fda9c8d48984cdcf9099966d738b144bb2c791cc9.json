{"ast":null,"code":"var _jsxFileName = \"/Users/saimanasa/Documents/GitHub/snakegame/src/Board/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\nclass SinglyLinkedList {\n  constructor(value) {\n    let node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\nlet BOARD_SIZE = 10;\nconst Board = () => {\n  _s();\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snakeCells, setSnakeCells] = useState(new Set([44]));\n  const [snake, setSnake] = useState(new SinglyLinkedList(44));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, cellIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${snakeCells.has(cellValue) ? \"snake-cell\" : \"\"}`\n      }, cellIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this))\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"JPQb0B0R2Dg7ulKAkvTV6RuPv3I=\");\n_c = Board;\nconst createBoard = BOARD_SIZE => {\n  let count = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(count++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","LinkedListNode","constructor","value","next","SinglyLinkedList","node","head","tail","BOARD_SIZE","Board","board","setBoard","createBoard","snakeCells","setSnakeCells","Set","snake","setSnake","map","row","rowIdx","cell","cellIdx","has","cellValue","count","currentRow","col","push"],"sources":["/Users/saimanasa/Documents/GitHub/snakegame/src/Board/Board.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Board.css\";\n\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass SinglyLinkedList {\n  constructor(value) {\n    let node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\n\nlet BOARD_SIZE = 10;\n\nconst Board = () => {\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snakeCells, setSnakeCells] = useState(new Set([44]));\n  const [snake, setSnake] = useState(new SinglyLinkedList(44));\n  return (\n    <div className=\"board\">\n      {board.map((row, rowIdx) => (\n        <div key={rowIdx} className=\"row\">\n          {row.map((cell, cellIdx) => (\n            <div\n              key={cellIdx}\n              className={`cell ${\n                snakeCells.has(cellValue) ? \"snake-cell\" : \"\"\n              }`}\n            ></div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst createBoard = (BOARD_SIZE) => {\n  let count = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(count++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nexport default Board;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,aAAa;AAAC;AAErB,MAAMC,cAAc,CAAC;EACnBC,WAAW,CAACC,KAAK,EAAE;IACjB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,IAAI,GAAG,IAAI;EAClB;AACF;AAEA,MAAMC,gBAAgB,CAAC;EACrBH,WAAW,CAACC,KAAK,EAAE;IACjB,IAAIG,IAAI,GAAG,IAAIL,cAAc,CAACE,KAAK,CAAC;IACpC,IAAI,CAACI,IAAI,GAAGD,IAAI;IAChB,IAAI,CAACE,IAAI,GAAGF,IAAI;EAClB;AACF;AAEA,IAAIG,UAAU,GAAG,EAAE;AAEnB,MAAMC,KAAK,GAAG,MAAM;EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAACa,WAAW,CAACJ,UAAU,CAAC,CAAC;EAC3D,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,IAAIgB,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,IAAIK,gBAAgB,CAAC,EAAE,CAAC,CAAC;EAC5D,oBACE;IAAK,SAAS,EAAC,OAAO;IAAA,UACnBM,KAAK,CAACQ,GAAG,CAAC,CAACC,GAAG,EAAEC,MAAM,kBACrB;MAAkB,SAAS,EAAC,KAAK;MAAA,UAC9BD,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,OAAO,kBACrB;QAEE,SAAS,EAAG,QACVT,UAAU,CAACU,GAAG,CAACC,SAAS,CAAC,GAAG,YAAY,GAAG,EAC5C;MAAE,GAHEF,OAAO;QAAA;QAAA;QAAA;MAAA,QAKf;IAAC,GARMF,MAAM;MAAA;MAAA;MAAA;IAAA,QAUjB;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,GApBIX,KAAK;AAAA,KAALA,KAAK;AAsBX,MAAMG,WAAW,GAAIJ,UAAU,IAAK;EAClC,IAAIiB,KAAK,GAAG,CAAC;EACb,MAAMf,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIS,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGX,UAAU,EAAEW,GAAG,EAAE,EAAE;IACzC,MAAMO,UAAU,GAAG,EAAE;IACrB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGnB,UAAU,EAAEmB,GAAG,EAAE,EAAE;MACzCD,UAAU,CAACE,IAAI,CAACH,KAAK,EAAE,CAAC;IAC1B;IACAf,KAAK,CAACkB,IAAI,CAACF,UAAU,CAAC;EACxB;EACA,OAAOhB,KAAK;AACd,CAAC;AACD,eAAeD,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}