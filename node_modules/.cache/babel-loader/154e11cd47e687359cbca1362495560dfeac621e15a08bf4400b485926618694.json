{"ast":null,"code":"var _jsxFileName = \"/Users/saimanasa/Documents/GitHub/snakegame/src/Board/Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Board.css\";\nimport { randomIntFromInterval } from \"../lib/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\nclass SinglyLinkedList {\n  constructor(value) {\n    let node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\nlet BOARD_SIZE = 10;\nconst Direction = {\n  UP: \"UP\",\n  RIGHT: \"RIGHT\",\n  DOWN: \"DOWN\",\n  LEFT: \"LEFT\"\n};\nconst Board = () => {\n  _s();\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snakeCells, setSnakeCells] = useState(new Set([44]));\n  const [snake, setSnake] = useState(new SinglyLinkedList(44));\n  const [direction, setDirection] = useState(Direction.RIGHT);\n  useEffect(() => {\n    setInterval(() => {}, 1000);\n    window.addEventListener(\"keydown\", e => {\n      const newDirection = getDirectionFromKey(e.key);\n      const isValidDirection = newDirection !== \"\";\n      if (isValidDirection) setDirection(newDirection);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cellValue, cellIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${snakeCells.has(cellValue) ? \"snake-cell\" : \"\"}`\n      }, cellIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this))\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"0U4xlCEDJVO8Z4XgvR/KXcontng=\");\n_c = Board;\nconst createBoard = BOARD_SIZE => {\n  let count = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(count++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nconst getDirectionFromKey = key => {\n  if (key == \"ArrowUp\") return Direction.UP;\n  if (key == \"ArrowRight\") return Direction.RIGHT;\n  if (key == \"ArrowDown\") return Direction.DOWN;\n  if (key == \"ArrowLeft\") return Direction.LEFT;\n  return \"\";\n};\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","randomIntFromInterval","LinkedListNode","constructor","value","next","SinglyLinkedList","node","head","tail","BOARD_SIZE","Direction","UP","RIGHT","DOWN","LEFT","Board","board","setBoard","createBoard","snakeCells","setSnakeCells","Set","snake","setSnake","direction","setDirection","setInterval","window","addEventListener","e","newDirection","getDirectionFromKey","key","isValidDirection","map","row","rowIdx","cellValue","cellIdx","has","count","currentRow","col","push"],"sources":["/Users/saimanasa/Documents/GitHub/snakegame/src/Board/Board.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Board.css\";\nimport { randomIntFromInterval } from \"../lib/utils\";\n\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass SinglyLinkedList {\n  constructor(value) {\n    let node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\n\nlet BOARD_SIZE = 10;\n\nconst Direction = {\n  UP: \"UP\",\n  RIGHT: \"RIGHT\",\n  DOWN: \"DOWN\",\n  LEFT: \"LEFT\",\n};\n\nconst Board = () => {\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snakeCells, setSnakeCells] = useState(new Set([44]));\n  const [snake, setSnake] = useState(new SinglyLinkedList(44));\n  const [direction, setDirection] = useState(Direction.RIGHT);\n\n  useEffect(() => {\n    setInterval(() => {}, 1000);\n\n    window.addEventListener(\"keydown\", (e) => {\n      const newDirection = getDirectionFromKey(e.key);\n      const isValidDirection = newDirection !== \"\";\n      if (isValidDirection) setDirection(newDirection);\n    });\n  }, []);\n\n  return (\n    <div className=\"board\">\n      {board.map((row, rowIdx) => (\n        <div key={rowIdx} className=\"row\">\n          {row.map((cellValue, cellIdx) => (\n            <div\n              key={cellIdx}\n              className={`cell ${\n                snakeCells.has(cellValue) ? \"snake-cell\" : \"\"\n              }`}\n            ></div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst createBoard = (BOARD_SIZE) => {\n  let count = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(count++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nconst getDirectionFromKey = (key) => {\n  if (key == \"ArrowUp\") return Direction.UP;\n  if (key == \"ArrowRight\") return Direction.RIGHT;\n  if (key == \"ArrowDown\") return Direction.DOWN;\n  if (key == \"ArrowLeft\") return Direction.LEFT;\n  return \"\";\n};\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}